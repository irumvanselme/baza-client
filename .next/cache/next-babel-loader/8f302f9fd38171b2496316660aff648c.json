{"ast":null,"code":"import { Services } from \"./services\";\nimport { HttpCommon } from \"./http\";\n\nclass QuestionsService extends Services {\n  create(question) {\n    return HttpCommon.post(\"/questions\", question);\n  }\n\n  search(query) {\n    return HttpCommon.get(\"/questions/search?query=\" + query);\n  }\n\n  feed(page) {\n    return HttpCommon.get(\"/questions/feed?page=\" + page);\n  }\n\n  get(question) {\n    return HttpCommon.get(`/questions/${question}`);\n  }\n\n  with_likes() {\n    return HttpCommon.get(\"/questions/authed\");\n  }\n\n  get_all() {\n    return HttpCommon.get(\"/questions\");\n  }\n\n  answer(question, answer) {\n    return HttpCommon.post(`/questions/${question}/answers`, answer);\n  }\n\n  answers(question) {\n    return HttpCommon.get(`/questions/${question}/answers`);\n  }\n\n  answers_with_auth(question) {\n    return HttpCommon.get(`/questions/${question}/answers/authed`);\n  }\n\n  like(question) {\n    return HttpCommon.post(`/questions/${question}/like`);\n  }\n\n  dislike(question) {\n    return HttpCommon.post(`/questions/${question}/dislike`);\n  }\n\n  check_for_me(question, type) {\n    return HttpCommon.get(`/check-likes/q/${question}/${type}`);\n  }\n\n  trending() {\n    return HttpCommon.get(\"/questions/trending\");\n  }\n\n}\n\nexport default new QuestionsService();","map":{"version":3,"sources":["D:/Developments/anselme-dev/baza/client/services/questions.service.js"],"names":["Services","HttpCommon","QuestionsService","create","question","post","search","query","get","feed","page","with_likes","get_all","answer","answers","answers_with_auth","like","dislike","check_for_me","type","trending"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAEA,MAAMC,gBAAN,SAA+BF,QAA/B,CAAwC;AACpCG,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,WAAOH,UAAU,CAACI,IAAX,CAAgB,YAAhB,EAA8BD,QAA9B,CAAP;AACH;;AAEDE,EAAAA,MAAM,CAACC,KAAD,EAAO;AACT,WAAON,UAAU,CAACO,GAAX,CAAe,6BAA2BD,KAA1C,CAAP;AACH;;AAEDE,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP,WAAOT,UAAU,CAACO,GAAX,CAAe,0BAA0BE,IAAzC,CAAP;AACH;;AAEDF,EAAAA,GAAG,CAACJ,QAAD,EAAW;AACV,WAAOH,UAAU,CAACO,GAAX,CAAgB,cAAaJ,QAAS,EAAtC,CAAP;AACH;;AAEDO,EAAAA,UAAU,GAAG;AACT,WAAOV,UAAU,CAACO,GAAX,CAAe,mBAAf,CAAP;AACH;;AAEDI,EAAAA,OAAO,GAAG;AACN,WAAOX,UAAU,CAACO,GAAX,CAAe,YAAf,CAAP;AACH;;AAEDK,EAAAA,MAAM,CAACT,QAAD,EAAWS,MAAX,EAAmB;AACrB,WAAOZ,UAAU,CAACI,IAAX,CAAiB,cAAaD,QAAS,UAAvC,EAAkDS,MAAlD,CAAP;AACH;;AAEDC,EAAAA,OAAO,CAACV,QAAD,EAAW;AACd,WAAOH,UAAU,CAACO,GAAX,CAAgB,cAAaJ,QAAS,UAAtC,CAAP;AACH;;AAEDW,EAAAA,iBAAiB,CAACX,QAAD,EAAW;AACxB,WAAOH,UAAU,CAACO,GAAX,CAAgB,cAAaJ,QAAS,iBAAtC,CAAP;AACH;;AAEDY,EAAAA,IAAI,CAACZ,QAAD,EAAW;AACX,WAAOH,UAAU,CAACI,IAAX,CAAiB,cAAaD,QAAS,OAAvC,CAAP;AACH;;AAEDa,EAAAA,OAAO,CAACb,QAAD,EAAW;AACd,WAAOH,UAAU,CAACI,IAAX,CAAiB,cAAaD,QAAS,UAAvC,CAAP;AACH;;AAEDc,EAAAA,YAAY,CAACd,QAAD,EAAWe,IAAX,EAAiB;AACzB,WAAOlB,UAAU,CAACO,GAAX,CAAgB,kBAAiBJ,QAAS,IAAGe,IAAK,EAAlD,CAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,WAAOnB,UAAU,CAACO,GAAX,CAAe,qBAAf,CAAP;AACH;;AAnDmC;;AAsDxC,eAAe,IAAIN,gBAAJ,EAAf","sourcesContent":["import { Services } from \"./services\";\nimport { HttpCommon } from \"./http\";\n\nclass QuestionsService extends Services {\n    create(question) {\n        return HttpCommon.post(\"/questions\", question);\n    }\n\n    search(query){\n        return HttpCommon.get(\"/questions/search?query=\"+query)\n    }\n\n    feed(page) {\n        return HttpCommon.get(\"/questions/feed?page=\" + page);\n    }\n\n    get(question) {\n        return HttpCommon.get(`/questions/${question}`);\n    }\n\n    with_likes() {\n        return HttpCommon.get(\"/questions/authed\");\n    }\n\n    get_all() {\n        return HttpCommon.get(\"/questions\");\n    }\n\n    answer(question, answer) {\n        return HttpCommon.post(`/questions/${question}/answers`, answer);\n    }\n\n    answers(question) {\n        return HttpCommon.get(`/questions/${question}/answers`);\n    }\n\n    answers_with_auth(question) {\n        return HttpCommon.get(`/questions/${question}/answers/authed`);\n    }\n\n    like(question) {\n        return HttpCommon.post(`/questions/${question}/like`);\n    }\n\n    dislike(question) {\n        return HttpCommon.post(`/questions/${question}/dislike`);\n    }\n\n    check_for_me(question, type) {\n        return HttpCommon.get(`/check-likes/q/${question}/${type}`);\n    }\n\n    trending() {\n        return HttpCommon.get(\"/questions/trending\");\n    }\n}\n\nexport default new QuestionsService();\n"]},"metadata":{},"sourceType":"module"}